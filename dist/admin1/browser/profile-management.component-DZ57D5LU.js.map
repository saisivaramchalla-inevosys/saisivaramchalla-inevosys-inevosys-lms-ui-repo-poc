{
  "version": 3,
  "sources": ["../../../projects/admin1/src/app/components/profile-management/profile-management.component.ts", "../../../projects/admin1/src/app/components/profile-management/profile-management.component.html"],
  "sourcesContent": ["import { Component, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { StateManagementService } from '../services/state-management.service';\r\nimport { Router } from '@angular/router';\r\n@Component({\r\n  selector: 'app-profile-management',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule],\r\n  templateUrl: './profile-management.component.html',\r\n  styleUrls: ['./profile-management.component.scss'],\r\n})\r\nexport class ProfileManagementComponent {\r\n  firstname: string = ''; // Holds the first name of the user\r\n  secondname: string = ''; // Holds the second name of the user\r\n  userData: any[] = []; // Array to store user data\r\n\r\n  // Injecting StateManagementService to manage state\r\n  private state = inject(StateManagementService);\r\n  // Injecting Router to navigate between routes\r\n  private route = inject(Router);\r\n\r\n  constructor() {\r\n    // Subscribing to the users$ observable to get user data\r\n    this.state.users$.subscribe(data => {\r\n      console.log(data);\r\n      this.userData = data;\r\n    });\r\n  }\r\n\r\n  // Method to submit user data\r\n  SubmitData = () => {\r\n    const data = {\r\n      firstname: this.firstname,\r\n      secondname: this.secondname\r\n    };\r\n    // Adding user data to the state\r\n    this.state.addUser(data);\r\n    // Navigating to the user page\r\n    this.route.navigate(['/admin/user']);\r\n    this.route.navigate(['/user']);\r\n  }\r\n}\r\n", "<!-- Profile Management Component -->\r\n<p class=\"text-lg\">profile-management works!</p>\r\n\r\n<!-- Form Container -->\r\n<div class=\"flex flex-col gap-4 mb-6 border-blue-500\">\r\n    <!-- First Name Input -->\r\n    <div>\r\n        <label for=\"first_name\" class=\"block mb-2 text-sm font-medium dark:text-white\">First name</label>\r\n        <input [(ngModel)]=\"firstname\" type=\"text\" id=\"first_name\" class=\"border border-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\" placeholder=\"Username\" required />\r\n    </div>\r\n    \r\n    <!-- Second Name Input -->\r\n    <div>\r\n        <label for=\"second_name\" class=\"block mb-2 text-sm font-medium dark:text-white\">Second Name</label>\r\n        <input type=\"text\" [(ngModel)]=\"secondname\" id=\"second_name\" class=\"border border-gray-300 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\" placeholder=\"Password\" required />\r\n    </div>\r\n    \r\n    <!-- Submit Button -->\r\n    <div class=\"text-center w-100\">\r\n        <button (click)=\"SubmitData()\" type=\"button\" class=\"text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2\">Submit</button>\r\n    </div>\r\n</div>\r\n\r\n<!-- User Data List -->\r\n<ul>\r\n    <li *ngFor=\"let user of userData\">\r\n        {{ user.firstname }} {{ user.secondname }}\r\n    </li>\r\n</ul>\r\n"],
  "mappings": "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",
  "names": []
}
